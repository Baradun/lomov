From 9193ee2bd1a8cba6383a92ec78ce72d3c4c0df6a Mon Sep 17 00:00:00 2001
From: Vladimir Lomov <vladimir@theor7.ktp>
Date: Tue, 2 Mar 2021 08:52:24 +0800
Subject: [PATCH 15/30] methods.py: make script to work with updated code

  - "global" variables: cast to int where we use integers;
  - subprocess.run: don't specify shell and check but use capture_output
    and text, this simplifies code a bit and allows to capture output
    and save it in a file;
  - "parameters": use dictionary not a list when running a program;
  - use "data" directory instead of "logs" as it more fits to its
    purpose;
  - returned to old (original) way to name data files;
  - use ".dat" for data files.

Signed-off-by: Vladimir Lomov <vladimir@theor7.ktp>
---
 scripts/methods.py | 57 +++++++++++++++++++++++-----------------------
 1 file changed, 28 insertions(+), 29 deletions(-)

diff --git a/scripts/methods.py b/scripts/methods.py
index 7f7e784..678c4af 100755
--- a/scripts/methods.py
+++ b/scripts/methods.py
@@ -2,6 +2,7 @@
 
 import json
 import os
+import io
 from multiprocessing import Pool
 from pathlib import Path
 import subprocess
@@ -10,7 +11,7 @@ import time
 BASE_DIR = os.getenv('BASE_DIR', 'main')
 RUN_FILE = os.getenv('RUN_FILE', "main")
 RUNS = int(os.getenv('RUNS', 10))
-CORES = os.getenv('CORES', 12)
+CORES = int(os.getenv('CORES', 12))
 SCRIPT_DIR = os.getenv('MESON_SOURCE_ROOT', '.')
 WDIR = os.getenv('MESON_BUILD_ROOT', '.')
 
@@ -20,12 +21,13 @@ def run_subprocess(params):
 
     """
     # params = (start, stop, step, method, output_file)
-    command = './' + BASE_DIR + '/' + RUN_FILE + ' ' + params[0] + \
-        ' ' + params[1] + ' ' + params[2] + ' ' + \
-        params[3] + ' > ' + params[4] + ' 2>&1'
+    command = [ str(params["program"]), params["start"], params["end"],
+            params["step"], params["method"] ]
 
     try:
-        result = subprocess.run([command], shell=True, check=True)
+        result = subprocess.run(command, capture_output=True, text=True)
+        with open(params["dat_file"], "w") as f:
+            f.write(result.stdout)
         if result.returncode == 0:
             return 0
         return RuntimeError
@@ -33,7 +35,7 @@ def run_subprocess(params):
         return exeption
 
 
-def get_params(params_file, log_dir):
+def get_params(params_file, data_dir):
     """Set up parameters to run a program.
 
     """
@@ -45,36 +47,38 @@ def get_params(params_file, log_dir):
         data = file.read()
     data_json = json.loads(data)
 
-    # There json file structure is unclear.
     for method_data in data_json.get('methods'):
         method_name = method_data.get('method')
         start = str(method_data.get('start'))
         stop = str(method_data.get('stop'))
         step = str(method_data.get('step'))
-        log_file_name = Path(log_dir / method_name)
+
+        exe = Path(BASE_DIR) / Path(RUN_FILE)
 
         for j in range(RUNS):
-            list_params.append((
-                start,
-                stop,
-                step,
-                method_name,
-                log_file_name / f'run_{j}.log'
-            ))
+            dat_file_p = f"{method_name}_{start},{stop}_{step}_r{j}.dat"
+            dat_file = Path(data_dir / dat_file_p)
+            list_params.append({
+                "program" : exe,
+                "start" : start,
+                "end" : stop,
+                "step" : step,
+                "method" : method_name,
+                "dat_file" : dat_file
+            })
 
     return list_params
 
 
-def run(log_dir, json_file):
+def run(data_dir, json_file):
     """Prepare all necessary to run programs in parallel.
 
     """
-    list_params = get_params(json_file, log_dir)
+    list_params = get_params(json_file, data_dir)
     process_pool = Pool(CORES)
     result = process_pool.map(run_subprocess, list_params)
     print(result)
-    
-    
+
     process_pool.close()
     process_pool.join()
 
@@ -84,9 +88,9 @@ if __name__ == '__main__':
 
     """
 
-    logs_dir = Path("logs")
-    if not os.path.isdir(logs_dir):
-        os.mkdir(logs_dir)
+    data_dir = Path("data")
+    if not os.path.isdir(data_dir):
+        os.mkdir(data_dir)
 
     json_dir = Path("methods")
     if not os.path.isdir(json_dir):
@@ -114,16 +118,11 @@ if __name__ == '__main__':
 
     #  LOG_FILE_DIR = 'logs_0.1_0.3/'
     #  PARAMS_FILE = 'methods_0.1_0.3.json'
-    log_dir = logs_dir / "01_03"
-    if not os.path.isdir(log_dir):
-        os.mkdir(log_dir)
     json_file = json_dir / "01_03.json"
     if not os.path.isfile(json_file):
-        print(f"Can't run this cycle, we need a '{json_file}' in '{json_dir}'!")
+        print(f"Can't do this run, we need a '{json_file}' in '{json_dir}'!")
         exit(2)
-    par_list = get_params(json_file, log_dir);
-    print(f"get_params returned: {par_list}")
-    # run(log_dir, json_file)
+    run(data_dir, json_file)
 
     print("end prgrm")
     print(time.time() - start_time)
-- 
2.30.1

